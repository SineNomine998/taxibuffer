# Generated by Django 5.2.4 on 2025-08-20 07:43

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        ("geofence", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="TaxiQueue",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("name", models.CharField(blank=True, max_length=200)),
                (
                    "notification_timeout_minutes",
                    models.PositiveIntegerField(default=2),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "buffer_zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geofence.bufferzone",
                    ),
                ),
                (
                    "pickup_zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="geofence.pickupzone",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QueueEntry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("waiting", "Waiting in Queue"),
                            ("notified", "Notified to Leave"),
                            ("dequeued", "Dequeued (Allowed to Pickup)"),
                            ("declined", "Declined Notification"),
                            ("timeout", "Notification Timeout"),
                            ("left_zone", "Left Buffer Zone"),
                        ],
                        default="waiting",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("notified_at", models.DateTimeField(blank=True, null=True)),
                ("dequeued_at", models.DateTimeField(blank=True, null=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "signup_location",
                    django.contrib.gis.db.models.fields.PointField(
                        blank=True, null=True, srid=4326
                    ),
                ),
                (
                    "chauffeur",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="accounts.chauffeur",
                    ),
                ),
                (
                    "queue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="queueing.taxiqueue",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="QueueNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "notification_time",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("response_time", models.DateTimeField(blank=True, null=True)),
                (
                    "response",
                    models.CharField(
                        choices=[
                            ("pending", "Pending Response"),
                            ("accepted", "Accepted (Will Leave)"),
                            ("declined", "Declined (Will Stay)"),
                            ("timeout", "No Response (Timeout)"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "queue_entry",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="queueing.queueentry",
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["queue_entry", "notification_time"],
                        name="queueing_qu_queue_e_dd714c_idx",
                    ),
                    models.Index(
                        fields=["response", "notification_time"],
                        name="queueing_qu_respons_8cd7d6_idx",
                    ),
                    models.Index(
                        fields=["notification_time"],
                        name="queueing_qu_notific_603ee1_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="taxiqueue",
            index=models.Index(
                fields=["buffer_zone", "pickup_zone"],
                name="queueing_ta_buffer__f65604_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="taxiqueue",
            index=models.Index(fields=["active"], name="queueing_ta_active_9af948_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="taxiqueue",
            unique_together={("buffer_zone", "pickup_zone")},
        ),
        migrations.AddIndex(
            model_name="queueentry",
            index=models.Index(
                fields=["queue", "status"], name="queueing_qu_queue_i_7c6cc1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="queueentry",
            index=models.Index(
                fields=["chauffeur", "status"], name="queueing_qu_chauffe_a69f24_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="queueentry",
            index=models.Index(
                fields=["status", "created_at"], name="queueing_qu_status_1b974c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="queueentry",
            index=models.Index(
                fields=["status", "notified_at"], name="queueing_qu_status_4d87e5_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="queueentry",
            unique_together={("queue", "chauffeur")},
        ),
    ]
